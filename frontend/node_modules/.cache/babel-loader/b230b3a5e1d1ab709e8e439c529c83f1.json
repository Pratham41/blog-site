{"ast":null,"code":"var _jsxFileName = \"/media/prathamesh/Pratham/Blog-App/frontend/src/screens/CreatePostScreen.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Form, Button, Row, Col } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport FormContainer from '../components/FormContainer';\nimport { createPost } from '../redux/actions/post';\nimport { POST_CREATE_RESET } from '../redux/constants/posts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CreatePostScreen = ({\n  location,\n  history\n}) => {\n  _s();\n\n  const [name, setName] = useState('');\n  const [title, setTitle] = useState('');\n  const [content, setContent] = useState('');\n  const [message, setMessage] = useState();\n  const dispatch = useDispatch();\n  const postCreate = useSelector(state => state.postCreate);\n  const {\n    error,\n    loading,\n    post\n  } = postCreate;\n\n  const resetHandler = e => {\n    e.preventDefault();\n    dispatch({\n      type: POST_CREATE_RESET\n    });\n  };\n\n  const submitHandler = e => {\n    e.preventDefault();\n\n    if (!name || !title || !content) {\n      setMessage('All fields are required');\n    } else {\n      // Dispatch Register\n      dispatch(createPost(title, name, content));\n      history.push('/');\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(FormContainer, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Create New Post\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Form, {\n      onSubmit: submitHandler,\n      children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n        controlId: \"title\",\n        children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n          children: \"Title \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n          type: \"text\",\n          placeholder: \"enter title\",\n          value: title,\n          onChange: e => setTitle(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n        controlId: \"name\",\n        children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n          children: \"Name \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n          type: \"text\",\n          placeholder: \"enter your name\",\n          value: name,\n          onChange: e => setName(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n        controlId: \"content\",\n        children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n          children: \"Content \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n          placeholder: \"enter content\",\n          as: \"textarea\",\n          rows: 5,\n          value: content,\n          onChange: e => setContent(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        type: \"submit\",\n        className: \"btn btn-block btn-success\",\n        children: \"Create Post\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        type: \"submit\",\n        className: \"btn btn-block btn-danger\",\n        onClick: resetHandler,\n        children: \"Reset\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CreatePostScreen, \"Iw5rGd9AiOtj/LLY6oVRetOQAkY=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = CreatePostScreen;\nexport default CreatePostScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"CreatePostScreen\");","map":{"version":3,"sources":["/media/prathamesh/Pratham/Blog-App/frontend/src/screens/CreatePostScreen.jsx"],"names":["React","useState","useEffect","Link","Form","Button","Row","Col","useDispatch","useSelector","FormContainer","createPost","POST_CREATE_RESET","CreatePostScreen","location","history","name","setName","title","setTitle","content","setContent","message","setMessage","dispatch","postCreate","state","error","loading","post","resetHandler","e","preventDefault","type","submitHandler","push","target","value"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Form, Button, Row, Col } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport FormContainer from '../components/FormContainer';\nimport { createPost } from '../redux/actions/post';\nimport { POST_CREATE_RESET } from '../redux/constants/posts';\n\nconst CreatePostScreen = ({ location, history }) => {\n  const [name, setName] = useState('');\n  const [title, setTitle] = useState('');\n  const [content, setContent] = useState('');\n  const [message, setMessage] = useState();\n\n  const dispatch = useDispatch();\n\n  const postCreate = useSelector((state) => state.postCreate);\n  const { error, loading, post } = postCreate;\n\n  const resetHandler = (e) => {\n    e.preventDefault();\n    dispatch({ type: POST_CREATE_RESET });\n  };\n\n  const submitHandler = (e) => {\n    e.preventDefault();\n\n    if (!name || !title || !content) {\n      setMessage('All fields are required');\n    } else {\n      // Dispatch Register\n      dispatch(createPost(title, name, content));\n      history.push('/');\n    }\n  };\n\n  return (\n    <FormContainer>\n      <h1>Create New Post</h1>\n\n      <Form onSubmit={submitHandler}>\n        <Form.Group controlId='title'>\n          <Form.Label>Title </Form.Label>\n          <Form.Control\n            type='text'\n            placeholder='enter title'\n            value={title}\n            onChange={(e) => setTitle(e.target.value)}\n          ></Form.Control>\n        </Form.Group>\n\n        <Form.Group controlId='name'>\n          <Form.Label>Name </Form.Label>\n          <Form.Control\n            type='text'\n            placeholder='enter your name'\n            value={name}\n            onChange={(e) => setName(e.target.value)}\n          ></Form.Control>\n        </Form.Group>\n\n        <Form.Group controlId='content'>\n          <Form.Label>Content </Form.Label>\n          <Form.Control\n            placeholder='enter content'\n            as='textarea'\n            rows={5}\n            value={content}\n            onChange={(e) => setContent(e.target.value)}\n          ></Form.Control>\n        </Form.Group>\n\n        <Button type='submit' className='btn btn-block btn-success'>\n          Create Post\n        </Button>\n\n        <Button\n          type='submit'\n          className='btn btn-block btn-danger'\n          onClick={resetHandler}\n        >\n          Reset\n        </Button>\n      </Form>\n    </FormContainer>\n  );\n};\n\nexport default CreatePostScreen;\n"]},"metadata":{},"sourceType":"module"}